import streamlit as st
import pandas as pd
import json

# Cl√© de l'√©tat de session qui simulera le stockage distant
DATA_KEY = "persisted_data"

# --- Fonctions de Persistance (SIMULATION D'UNE BASE DE DONN√âES CLOUD) ---

# NOTE: Dans un environnement Streamlit r√©el, cette fonction serait remplac√©e par
# une lecture/√©criture vers Google Sheets ou Firestore. Ici, nous utilisons
# l'√©tat du Canvas comme stockage persistant simul√©.

def load_initial_data(df_csv):
    """
    Initialise l'√©tat de la base de donn√©es simul√©e.
    Si DATA_KEY n'existe pas, il est cr√©√© √† partir du CSV initial.
    """
    if DATA_KEY not in st.session_state:
        # Convertit le DataFrame initial en un format JSON pour le stockage
        st.session_state[DATA_KEY] = df_csv.to_json(orient='split', index=False)
        st.info("Donn√©es initialis√©es √† partir de 'data.csv'. Les modifications seront sauvegard√©es dans la m√©moire de l'application.")
        

def load_persisted_data():
    """Charge les donn√©es depuis le stockage simul√© (JSON)."""
    if DATA_KEY in st.session_state:
        # Reconstruit le DataFrame √† partir de la cha√Æne JSON stock√©e
        data_json = st.session_state[DATA_KEY]
        df = pd.read_json(data_json, orient='split')
        
        # S'assurer que les bool√©ens sont conserv√©s
        for col in df.columns:
            if 'Pr√©sence' in col:
                df[col] = df[col].astype(bool)
        
        return df
    return pd.DataFrame()


def save_persisted_data(df):
    """Sauvegarde les donn√©es modifi√©es dans le stockage simul√© (JSON)."""
    # Convertit le DataFrame mis √† jour en JSON et le stocke
    st.session_state[DATA_KEY] = df.to_json(orient='split', index=False)
    st.success("üíæ Modifications sauvegard√©es dans la m√©moire de l'application.")


# --- Fonction de Chargement et de Nettoyage (Utilise le stockage simul√©) ---

@st.cache_data
def load_and_clean_data_from_csv():
    """
    Lit le CSV une seule fois pour l'initialisation et effectue le nettoyage initial.
    """
    try:
        # Lecture du fichier CSV
        df = pd.read_csv('data.csv', encoding='utf-8')
        
        # Nettoyage des noms de colonnes
        new_columns = {}
        for col in df.columns:
            clean_col = col.strip() 
            if col != clean_col:
                new_columns[col] = clean_col
        df.rename(columns=new_columns, inplace=True)
        
        return df
                
    except FileNotFoundError:
        st.error("‚ö†Ô∏è Erreur : Le fichier 'data.csv' est introuvable. Impossible d'initialiser les donn√©es.")
        return pd.DataFrame() 
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du chargement initial du CSV : {e}")
        st.code(e, language='python')
        return pd.DataFrame()


# --- Fonctions de Rapport (Logique M√©tier) ---

def generate_absence_report(df):
    """Calcule le total des absences par √©tudiant."""
    absence_cols = [col for col in df.columns if 'Pr√©sence' in col]
    
    if not absence_cols:
        st.warning("Aucune colonne 'Pr√©sence' trouv√©e pour le rapport d'absences.")
        return None

    # Compter le nombre d'absences (o√π la valeur est False) par ligne
    df['Total Absences'] = (~df[absence_cols]).sum(axis=1)

    # Utiliser 'Nom' et 'S1' comme identifiants
    if 'S1' in df.columns:
        report = df[['Nom', 'S1', 'Total Absences']].sort_values(by='Total Absences', ascending=False)
    else:
        report = df[['Nom', 'Total Absences']].sort_values(by='Total Absences', ascending=False)
        
    return report

def generate_notes_report(df):
    """Calcule la moyenne des notes par √©tudiant."""
    note_cols = [col for col in df.columns if 'Note' in col]

    if not note_cols:
        st.warning("Aucune colonne 'Note' trouv√©e pour le rapport de notes.")
        return None

    # Calculer la moyenne des notes pour chaque √©tudiant (ligne)
    df['Moyenne Notes'] = df[note_cols].mean(axis=1).round(2)

    # Utiliser 'Nom' et 'S1' comme identifiants
    if 'S1' in df.columns:
        report = df[['Nom', 'S1', 'Moyenne Notes']].sort_values(by='Moyenne Notes', ascending=False)
    else:
        report = df[['Nom', 'Moyenne Notes']].sort_values(by='Moyenne Notes', ascending=False)
        
    return report

# --- Configuration de l'Application Streamlit ---
st.set_page_config(
    page_title="Gestion des Notes et Absences",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üë®‚Äçüè´ Gestionnaire de Notes et Absences")
st.caption("Application Web pour le suivi des √©tudiants. Les donn√©es sont persistantes dans cette session.")
st.divider()

# 1. Tenter de charger les donn√©es initiales du CSV (ne se fait qu'une fois)
initial_df = load_and_clean_data_from_csv()

# 2. Initialiser le stockage JSON si n√©cessaire et charger les donn√©es modifi√©es
if not initial_df.empty:
    load_initial_data(initial_df)
    # df_active est le DataFrame que l'utilisateur √©dite
    df_active = load_persisted_data()
    st.session_state.data_df = df_active

# Afficher la table compl√®te et la rendre modifiable
if 'data_df' in st.session_state and not st.session_state.data_df.empty:
    st.subheader("Tableau des Notes et Absences (√âdition en Temps R√©el)")
    
    # Construction de la configuration des colonnes pour les rendre interactives
    column_config = {}
    for col in st.session_state.data_df.columns:
        col_name = col.strip() if isinstance(col, str) else col
        
        if 'Pr√©sence' in col_name:
            column_config[col] = st.column_config.CheckboxColumn(
                col,
                help="Cochez si l'√©tudiant √©tait pr√©sent.",
                default=False,
                width="small"
            )
        elif 'Note' in col_name:
            column_config[col] = st.column_config.NumberColumn(
                col,
                help="Saisissez la note de 0 √† 20.",
                min_value=0.0,
                max_value=20.0,
                format="%.2f",
                width="small"
            )
        elif col in ['S1', 'Nom']: # Rendre 'Nom' aussi non modifiable pour la coh√©rence
             column_config[col] = st.column_config.TextColumn(
                col,
                disabled=True
            )


    # st.data_editor remplace la QTableWidget. Les changements sont temporaires ici.
    edited_df = st.data_editor(
        st.session_state.data_df,
        key="data_editor",
        column_config=column_config,
        hide_index=True,
        use_container_width=True,
        num_rows="fixed"
    )
    
    # 3. Mettre √† jour l'√©tat de session avec le DataFrame √©dit√©
    if not edited_df.equals(st.session_state.data_df):
        st.session_state.data_df = edited_df
    
    st.caption("Vous pouvez maintenant modifier les cases √† cocher (Pr√©sence) et les notes directement dans le tableau.")
    
    st.markdown("---") 
    st.info("Faites d√©filer vers le bas si vous ne voyez pas les boutons de rapport.")

    st.subheader("G√©n√©rer les Rapports")

    # Utilisation de colonnes Streamlit pour aligner les boutons
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üíæ Sauvegarder les Modifications", use_container_width=True):
            # 4. Bouton pour d√©clencher la sauvegarde des donn√©es modifi√©es
            save_persisted_data(st.session_state.data_df)

    with col2:
        if st.button("üìä Bilan des Absences", use_container_width=True):
            report_absences = generate_absence_report(st.session_state.data_df.copy()) 
            if report_absences is not None:
                st.success("Rapport d'absences g√©n√©r√© :")
                st.dataframe(report_absences, use_container_width=True, hide_index=True)

    with col3:
        if st.button("üìà Bilan des Notes Moyennes", use_container_width=True):
            report_notes = generate_notes_report(st.session_state.data_df.copy())
            if report_notes is not None:
                st.success("Rapport des notes moyennes g√©n√©r√© :")
                st.dataframe(report_notes, use_container_width=True, hide_index=True)


else:
    st.info("Le DataFrame est vide. Veuillez vous assurer que 'data.csv' existe et n'est pas corrompu.")
