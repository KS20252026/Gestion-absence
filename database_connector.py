import streamlit as st
import pandas as pd
import json

# Cl√© de stockage utilis√©e pour simuler le 'Cloud'
FIREBASE_COLLECTION_KEY = "simulated_firestore_data"

def init_db():
    """
    Simule l'initialisation de la connexion √† la base de donn√©es.
    (Dans un environnement r√©el, ce serait l'initialisation de Firebase/Firestore.)
    """
    # Aucune action n√©cessaire pour la simulation, mais la fonction est conserv√©e pour l'architecture.
    pass

def fetch_data():
    """
    Simule la r√©cup√©ration des donn√©es depuis la base de donn√©es Cloud.
    Si aucune donn√©e n'est trouv√©e, retourne un DataFrame vide.
    """
    if FIREBASE_COLLECTION_KEY in st.session_state:
        # Reconstruit le DataFrame √† partir de la cha√Æne JSON stock√©e
        data_json = st.session_state[FIREBASE_COLLECTION_KEY]
        df = pd.read_json(data_json, orient='split')
        
        # S'assurer que les bool√©ens sont conserv√©s
        for col in df.columns:
            if 'Pr√©sence' in col:
                df[col] = df[col].astype(bool)
        
        return df
    return pd.DataFrame()

def write_data(df):
    """
    Simule l'√©criture des donn√©es mises √† jour dans la base de donn√©es Cloud.
    """
    # Convertit le DataFrame mis √† jour en JSON et le stocke
    st.session_state[FIREBASE_COLLECTION_KEY] = df.to_json(orient='split', index=False)
    st.success("üíæ Modifications sauvegard√©es (simulation Cloud r√©ussie).")
